(()=>{"use strict";const e=(e,t)=>t.some((t=>e instanceof t));let t,n;const r=new WeakMap,a=new WeakMap,s=new WeakMap;let o={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return d(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function c(e){o=e(o)}function i(a){return"function"==typeof a?(s=a,(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(s)?function(...e){return s.apply(u(this),e),d(this.request)}:function(...e){return d(s.apply(u(this),e))}):(a instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",s),e.removeEventListener("abort",s)},a=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",a),e.addEventListener("error",s),e.addEventListener("abort",s)}));r.set(e,t)}(a),e(a,t||(t=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(a,o):a);var s}function d(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",a),e.removeEventListener("error",s)},a=()=>{t(d(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",a),e.addEventListener("error",s)}));return s.set(t,e),t}(e);if(a.has(e))return a.get(e);const t=i(e);return t!==e&&(a.set(e,t),s.set(t,e)),t}const u=e=>s.get(e),l=["get","getKey","getAll","getAllKeys","count"],p=["put","add","delete","clear"],m=new Map;function f(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(m.get(t))return m.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,a=p.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!a&&!l.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,a?"readwrite":"readonly");let o=s.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),a&&s.done]))[0]};return m.set(t,s),s}c((e=>({...e,get:(t,n,r)=>f(t,n)||e.get(t,n,r),has:(t,n)=>!!f(t,n)||e.has(t,n)})));const y=["continue","continuePrimaryKey","advance"],I={},h=new WeakMap,w=new WeakMap,g={get(e,t){if(!y.includes(t))return e[t];let n=I[t];return n||(n=I[t]=function(...e){h.set(this,w.get(this)[t](...e))}),n}};async function*b(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const n=new Proxy(t,g);for(w.set(n,t),s.set(n,u(t));t;)yield n,t=await(h.get(n)||t.continue()),h.delete(n)}function v(t,n){return n===Symbol.asyncIterator&&e(t,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===n&&e(t,[IDBIndex,IDBObjectStore])}c((e=>({...e,get:(t,n,r)=>v(t,n)?b:e.get(t,n,r),has:(t,n)=>v(t,n)||e.has(t,n)})));class D{constructor(){}static storeNames=["projects","schemas","current_project","user_data"];static async createStoreInDB(){try{return D.db=await function(e,t,{blocked:n,upgrade:r,blocking:a,terminated:s}={}){const o=indexedDB.open(e,t),c=d(o);return r&&o.addEventListener("upgradeneeded",(e=>{r(d(o.result),e.oldVersion,e.newVersion,d(o.transaction),e)})),n&&o.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),c.then((e=>{s&&e.addEventListener("close",(()=>s())),a&&e.addEventListener("versionchange",(e=>a(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),c}("quick-scrape",1,{upgrade(e){const t=e.objectStoreNames,n=D.storeNames.filter((e=>{if(0===t.length)return!0;for(const n of t)if(console.log(n),n===e)return!1;return!0}));for(const t of n)switch(t){case"current_project":e.createObjectStore(t);break;case"user_data":break;case"projects":e.createObjectStore(t,{keyPath:"id"}).createIndex("projectName","name",{unique:!0});break;case"schemas":e.createObjectStore(t,{keyPath:"id"}).createIndex("schemaName","name",{unique:!0});break;default:console.log(`Unknown store: ${t}`)}}}),"IndexedDB store update success"}catch(e){return console.log(typeof e),"Failure to update store"}}static async addToStore(e,t){const n=D.db.transaction(e,"readwrite");await n.store.add(t),await n.done}static async removeFromStore(e,t){const n=D.db.transaction(e,"readwrite");switch(e){case"projects":if("project"===t.dataType)n.store.delete(t.mainId);else if("session"===t.dataType){const e=await n.store.get(t.mainId);delete e.sessionNames[t.secondaryId],await n.store.put(e,t.mainId)}else if("project_schema"===t.dataType){const e=await n.store.get(t.mainId);delete e.projectSchemas[t.secondaryId],await n.store.put(e,t.mainId)}else if("session_schema"===t.dataType){const e=await n.store.get(t.mainId);delete e.sessionNames[t.secondaryId][t.tertiaryId],await n.store.put(e,t.mainId)}else if("capture"===t.dataType){const e=await n.store.get(t.mainId);delete e.sessionNames[t.secondaryId][t.tertiaryId],await n.store.put(e,t.mainId)}break;case"schemas":n.store.delete(t.mainId)}await n.done}static async updateStore(e,t){const n=D.db.transaction(e,"readwrite");await n.store.put(t.data,t.mainId),await n.done}}const B=D;let S="popup";chrome.runtime.onMessage.addListener(((e,t,n)=>{"get_render_context"===e.action&&(n({renderContext:S}),S="popup")})),chrome.runtime.onMessage.addListener((e=>{"open_side_panel"===e.action&&(S="side_panel",chrome.tabs.query({active:!0,currentWindow:!0},(e=>{let[t]=e;const n=t.id;n&&chrome.sidePanel.open({tabId:n})})))})),chrome.runtime.onInstalled.addListener((async()=>{const e=await B.createStoreInDB();console.log(e)})),chrome.runtime.onMessage.addListener(((e,t,n)=>{if("add_to_database"===e.action){const{payload:t}=e,{store:r,data:a}=t,s={success:!1};return(async(e,t)=>(await B.addToStore(e,t),"Add to database successful"))(r,a).then((()=>{s.success=!0,n(s)})).catch((e=>{console.log(typeof e),n(s)})),!0}})),chrome.runtime.onMessage.addListener(((e,t,n)=>{if("remove_from_database"===e.action){const{payload:t}=e,r={success:!1};return(async e=>(await B.removeFromStore(e.store,e.data),"remove from database successful"))(t).then((()=>{r.success=!0,n(r)})).catch((e=>{console.log(typeof e),n(r)})),!0}})),chrome.runtime.onMessage.addListener(((e,t,n)=>{if("update_database"===e.action){const{payload:t}=e,r={success:!1};return(async e=>(await B.updateStore(e.store,e.data),"Update database successful"))(t).then((()=>{r.success=!0,n(r)})).catch((e=>{console.log(typeof e),n(r)})),!0}}))})();