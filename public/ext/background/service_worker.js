(()=>{"use strict";const e=(e,t)=>t.some((t=>e instanceof t));let t,r;const n=new WeakMap,a=new WeakMap,o=new WeakMap;let s={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return n.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return d(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function c(e){s=e(s)}function i(a){return"function"==typeof a?(o=a,(r||(r=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(o)?function(...e){return o.apply(u(this),e),d(this.request)}:function(...e){return d(o.apply(u(this),e))}):(a instanceof IDBTransaction&&function(e){if(n.has(e))return;const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",o),e.removeEventListener("abort",o)},a=()=>{t(),n()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",a),e.addEventListener("error",o),e.addEventListener("abort",o)}));n.set(e,t)}(a),e(a,t||(t=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(a,s):a);var o}function d(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("success",a),e.removeEventListener("error",o)},a=()=>{t(d(e.result)),n()},o=()=>{r(e.error),n()};e.addEventListener("success",a),e.addEventListener("error",o)}));return o.set(t,e),t}(e);if(a.has(e))return a.get(e);const t=i(e);return t!==e&&(a.set(e,t),o.set(t,e)),t}const u=e=>o.get(e),l=["get","getKey","getAll","getAllKeys","count"],p=["put","add","delete","clear"],m=new Map;function f(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(m.get(t))return m.get(t);const r=t.replace(/FromIndex$/,""),n=t!==r,a=p.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!a&&!l.includes(r))return;const o=async function(e,...t){const o=this.transaction(e,a?"readwrite":"readonly");let s=o.store;return n&&(s=s.index(t.shift())),(await Promise.all([s[r](...t),a&&o.done]))[0]};return m.set(t,o),o}c((e=>({...e,get:(t,r,n)=>f(t,r)||e.get(t,r,n),has:(t,r)=>!!f(t,r)||e.has(t,r)})));const y=["continue","continuePrimaryKey","advance"],w={},h=new WeakMap,I=new WeakMap,g={get(e,t){if(!y.includes(t))return e[t];let r=w[t];return r||(r=w[t]=function(...e){h.set(this,I.get(this)[t](...e))}),r}};async function*b(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const r=new Proxy(t,g);for(I.set(r,t),o.set(r,u(t));t;)yield r,t=await(h.get(r)||t.continue()),h.delete(r)}function D(t,r){return r===Symbol.asyncIterator&&e(t,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===r&&e(t,[IDBIndex,IDBObjectStore])}c((e=>({...e,get:(t,r,n)=>D(t,r)?b:e.get(t,r,n),has:(t,r)=>D(t,r)||e.has(t,r)})));class v{constructor(){}static storeNames=["projects","schemas","current_project","user_data"];static async createStoreInDB(){try{return v.db=await function(e,t,{blocked:r,upgrade:n,blocking:a,terminated:o}={}){const s=indexedDB.open(e,t),c=d(s);return n&&s.addEventListener("upgradeneeded",(e=>{n(d(s.result),e.oldVersion,e.newVersion,d(s.transaction),e)})),r&&s.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),c.then((e=>{o&&e.addEventListener("close",(()=>o())),a&&e.addEventListener("versionchange",(e=>a(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),c}("quick-scrape",1,{upgrade(e){const t=e.objectStoreNames,r=v.storeNames.filter((e=>{if(0===t.length)return!0;for(const r of t)if(console.log(r),r===e)return!1;return!0}));for(const t of r)switch(t){case"current_project":e.createObjectStore(t);break;case"user_data":break;case"projects":e.createObjectStore(t,{keyPath:"id"}).createIndex("projectName","name",{unique:!0});break;case"schemas":e.createObjectStore(t,{keyPath:"id"}).createIndex("schemaName","name",{unique:!0});break;default:console.log(`Unknown store: ${t}`)}}}),"IndexedDB store update success"}catch(e){return console.log(typeof e),"Failure to update store"}}static async addToStore(e,t){v.db||await v.createStoreInDB();const r=v.db.transaction(e,"readwrite");await r.store.add(t),await r.done}static async removeFromStore(e,t){v.db||await v.createStoreInDB();const r=v.db.transaction(e,"readwrite");switch(e){case"projects":if("project"===t.dataType)r.store.delete(t.mainId);else if("session"===t.dataType){const e=await r.store.get(t.mainId);delete e.sessionNames[t.secondaryId],await r.store.put(e,t.mainId)}else if("project_schema"===t.dataType){const e=await r.store.get(t.mainId);delete e.projectSchemas[t.secondaryId],await r.store.put(e,t.mainId)}else if("session_schema"===t.dataType){const e=await r.store.get(t.mainId);delete e.sessionNames[t.secondaryId][t.tertiaryId],await r.store.put(e,t.mainId)}else if("capture"===t.dataType){const e=await r.store.get(t.mainId);delete e.sessionNames[t.secondaryId][t.tertiaryId],await r.store.put(e,t.mainId)}break;case"schemas":r.store.delete(t.mainId)}await r.done}static async updateStore(e,t){v.db||await v.createStoreInDB();const r=v.db.transaction(e,"readwrite");await r.store.put(t.data,t.mainId),await r.done}static async fetchAllProjects(){v.db||await v.createStoreInDB();const e=v.db.transaction("projects","readwrite"),t=await e.store.getAll();return await e.done,t}}const B=v;let S="popup",j="schema_editor";chrome.runtime.onMessage.addListener(((e,t,r)=>("get_render_context"===e.action&&(r({renderContext:S,view:"popup"===S?"welcome":j}),S="popup"),!0))),chrome.runtime.onMessage.addListener((e=>{"open_side_panel"===e.action&&(S="side_panel",j=e.payload.panel_view,chrome.tabs.query({active:!0,currentWindow:!0},(e=>{let[t]=e;const r=t.id;r&&chrome.sidePanel.open({tabId:r})})))})),chrome.runtime.onInstalled.addListener((async()=>{const e=await B.createStoreInDB();console.log(e)})),chrome.runtime.onMessage.addListener((async(e,t,r)=>{if("fetch_all_projects"===e.action){let e=[];return(async()=>{try{return await B.fetchAllProjects()}catch(e){throw console.log(e),new Error("")}})().then((t=>{e=t,r(e)})).catch((t=>{console.log(typeof t),r(e)})),!0}})),chrome.runtime.onMessage.addListener(((e,t,r)=>{if("add_to_database"===e.action){const{payload:t}=e,{store:n,data:a}=t,o={success:!1};return(async(e,t)=>{try{return await B.addToStore(e,t),"Add to database successful"}catch(e){throw console.log(e),new Error("")}})(n,a).then((()=>{o.success=!0,r(o)})).catch((e=>{console.log(typeof e),r(o)})),!0}})),chrome.runtime.onMessage.addListener(((e,t,r)=>{if("remove_from_database"===e.action){const{payload:t}=e,n={success:!1};return(async e=>(await B.removeFromStore(e.store,e.data),"remove from database successful"))(t).then((()=>{n.success=!0,r(n)})).catch((e=>{console.log(typeof e),r(n)})),!0}})),chrome.runtime.onMessage.addListener(((e,t,r)=>{if("update_database"===e.action){const{payload:t}=e,n={success:!1};return(async e=>(await B.updateStore(e.store,e.data),"Update database successful"))(t).then((()=>{n.success=!0,r(n)})).catch((e=>{console.log(typeof e),r(n)})),!0}}))})();